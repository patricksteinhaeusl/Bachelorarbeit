#!/usr/bin/env node

/**
 * Environment variables
 */

process.env.NODE_ENV = process.env.NODE_ENV || 'development';
process.env.NODE_RCE_EVAL = process.env.NODE_RCE_EVAL || 'off';
process.env.NODE_RCE_SERIALIZATION = process.env.NODE_RCE_SERIALIZATION || 'off';

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const https = require('https');
const GlobalConfig = require('../configs/index');

/**
 * Get port and store in Express.
 */

const port = normalizePort(GlobalConfig.server.port);
const sslPort = normalizePort(GlobalConfig.server.sslPort);
const host = GlobalConfig.server.host;

/**
 * ForceSSL Options
 */
app.set('forceSSLOptions', {
    httpsPort: sslPort
});

/**
 * Create HTTP(S) server.
 */

const server = http.createServer(app);
const secureServer = https.createServer(GlobalConfig.sslOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host, function() {
    let address = server.address();
    let host = address.address;
    let port = address.port;
    console.log('Server started: http://' + host + ':' + port + ' in ' + process.env.NODE_ENV + ' mode');
    console.log("NODE_RCE_EVAL: " + process.env.NODE_RCE_EVAL);
    console.log("NODE_RCE_SERIALIZATION: " + process.env.NODE_RCE_SERIALIZATION);
});

server.on('error', (error) => onError(error, port));
server.on('listening', () => onListening(server));

secureServer.listen(sslPort, host, function() {
    let address = secureServer.address();
    let host = address.address;
    let port = address.port;
    console.log('Server started: https://' + host + ':' + port + ' in ' + process.env.NODE_ENV + ' mode');
    console.log("NODE_RCE_EVAL: " + process.env.NODE_RCE_EVAL);
    console.log("NODE_RCE_SERIALIZATION: " + process.env.NODE_RCE_SERIALIZATION);
});

secureServer.on('error', (error) => onError(error, sslPort));
secureServer.on('listening', () => onListening(secureServer));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

require('../websocket')(secureServer);
