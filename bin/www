#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const GlobalConfig = require('../configs/index');
const cookie = require('cookie');

/**
 * Get port from environment and store in Express.
 */

const port = GlobalConfig.server.port;
const host = GlobalConfig.server.host;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host, function() {
  let address = server.address();
  let host = address.address;
  let port = address.port;
  console.log('Server started: http://' + host + ':' + port + ' in ' + app.get('env') + ' mode');
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

const io = require('socket.io')(server);

let users = [];

io.on('connection', function(socket) {
    let room = null;
    if(socket.request.headers.cookie) {
        let cookies = cookie.parse(socket.request.headers.cookie);
        room = cookies.room;
        if(room) {
            socket.join(room);
        }
    }

    socket.on('join', function (user) {
        join(user);
        socket.join(user._id);
    });

    socket.on('reJoin', function (user) {
        let updatedUser = updateUser(user);

        if(updatedUser) {
            socket.emit('join', updatedUser);
            io.emit('userList', users);
            socket.join(updatedUser._id);
        } else {
            join(user);
            socket.join(user._id);
        }
    });

    socket.on('leave', function (data) {
        deleteUser(data);
        socket.emit('leave');
        io.emit('userList', users);
    });

    socket.on('getMsg', function (data) {
        socket.to(data.to).emit('sendMsg', { msg: data.msg, from: data.from });
    });

    io.emit('userList', users);

    function join(user) {
        let newUser = {
            _id: user._id,
            username: user.username
        };

        if(!existsUser(newUser)) {
            users.push(newUser);
        }

        socket.emit('join', newUser);
        io.emit('userList', users);
    }

    function existsUser(user) {
        for(let i = 0; i < users.length; i++) {
            if(users[i]._id === user._id) {
                return true;
            }
        }
        return false;
    }

    function updateUser(user) {
        for(let i = 0; i < users.length; i++) {
            if(users[i]._id === user._id) {
                users[i].username = user.username;
                return users[i];
            }
        }
        return null;
    }

    function deleteUser(user) {
        for(let i = 0; i < users.length; i++) {
            if(users[i]._id === user._id) {
                users.splice(i, 1);
            }
        }
    }
});
